version: Build {Build}
image: Visual Studio 2017

environment:
    matrix:
        - PlatformToolset: v141
        - PlatformToolset: v140

platform:
    - x64
    - x86

configuration:
    - Release
    - Debug

install:
    - if "%platform%"=="x64" set archi=amd64
    - if "%platform%"=="x64" set platform_input=x64

    - if "%platform%"=="x86" set archi=x86
    - if "%platform%"=="x86" set platform_input=x86

    - if "%PlatformToolset%"=="v140" call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %archi%
    - if "%PlatformToolset%"=="v141" call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" %archi%

before_build:
- ps: |
    Write-Output "Configuration: $env:CONFIGURATION"
    Write-Output "Platform: $env:PLATFORM_INPUT"
    $generator = switch ($env:PLATFORMTOOLSET)
    {
        "v140" {"Visual Studio 14 2015"}
        "v141" {"Visual Studio 15 2017"}
    }
    # not applicable with MinGW Makefiles generator
    if ($env:PLATFORM_INPUT -eq "x64")
    {
        $generator = "$generator Win64"
    }
    # cmake build type, depended on the used generator, see https://cmake.org/cmake/help/v3.6/variable/CMAKE_BUILD_TYPE.html#variable:CMAKE_BUILD_TYPE
    # seems vs build always needs also the debug config, choose via the config option to the build command
    $build_type = "-DCMAKE_CONFIGURATION_TYPES=""Debug;Release"" "
    $build_config = "--config $env:CONFIGURATION"
    Write-Output "build_type: $build_type"
    Write-Output "build_config: $build_config"

build_script:
- ps: |
    cd c:\projects\nppgtags\
    md _build -Force | Out-Null
    cd _build
    & cmake -G "$generator" $build_type ..
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }
    & cmake --build . --config $env:CONFIGURATION
    if ($LastExitCode -ne 0) {
        throw "Exec: $ErrorMessage"
    }

after_build:
- ps: |
    cd c:\projects\nppgtags\

    $NppGTagsFileName = "NppGTags.$env:PLATFORM_INPUT.$env:CONFIGURATION.$env:PLATFORMTOOLSET.dll"
    Push-AppveyorArtifact "_build\$env:CONFIGURATION\NppGTags.dll" -FileName "$NppGTagsFileName"

    if ($($env:APPVEYOR_REPO_TAG) -eq "true" -and $env:PLATFORMTOOLSET -eq "v140" -and $env:CONFIGURATION -eq "Release")
    {
        $ZipFileName = "NppGTags_$($env:APPVEYOR_REPO_TAG_NAME)_$env:PLATFORM_INPUT.zip"
        md deploy -Force | Out-Null
        md deploy\NppGTags -Force | Out-Null
        md deploy\NppGTags\NppGTags -Force | Out-Null
        Copy-Item _build\$env:CONFIGURATION\NppGTags.dll deploy\NppGTags\NppGTags.dll
        Copy-Item bin\NppGTags\*.* deploy\NppGTags\NppGTags\
        7z a $ZipFileName .\deploy\NppGTags\*
        Remove-Item deploy\NppGTags\NppGTags.dll
        Remove-Item deploy\NppGTags\NppGTags\*.*
    }

artifacts:
  - path: NppGTags_*.zip
    name: releases

deploy:
    provider: GitHub
    auth_token:
        secure: 7/ifzsk2Tk/V63jr6/WyA4HdmukWhg2PD7pCgJma7f/QYuZCsyE6RZ5M3RIr6JVc
    artifact: releases
    draft: false
    prerelease: false
    force_update: true
    on:
        appveyor_repo_tag: true
        PlatformToolset: v140
        configuration: Release
